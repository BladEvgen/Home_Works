Задание 1.  
[1 балл] 
1) Создайте новое виртуальное окружение, новый проект и приложение, выполните первичные настройки проекта. Объясните параметры настройки проекта. 
2) Выполните миграции, создайте суперпользователя. Накатите библиотеки django-grappelli, Pillow, cors-headers и их настройки. Запустите приложение. 
 
 django-admin startproject django_settings .
 django-admin startapp django_app

 в settings.py докидываю в installed_apps название приложения  "django_app", нужно что применения миграций
 тамже  в TEMPLATES меняб на  "DIRS": [BASE_DIR / "templates"] чтобы django сам отдавал шаблоны, для MVT полезно.

 Подключение grappelli и cors
 в installed_apps 
     "grappelli",
выше чем 
    'django.contrib.admin',

также в любой место в installed_apps докидываю     "corsheaders",
и в middleware     "corsheaders.middleware.CorsMiddleware", до CommonMiddleware

создаю в settings.py разрешенный массив доменов

CORS_ALLOWED_ORIGINS = []

 Настраиваю статику используя 

 STATIC_URL = "/static/"
STATIC_ROOT = Path(BASE_DIR, "staticroot")

STATICFILES_DIRS = [
    Path(BASE_DIR / "static"),
]

и медия 
MEDIA_URL = "/media/"
MEDIA_ROOT = Path(BASE_DIR / "static/media")

Миграции
python.exe .\manage.py makemigrations 
python.exe .\manage.py migrate        
Суперпользователь
python.exe .\manage.py createsuperuser


в django_settings.urls дописываю  path("", include("django_app.urls")) что бы наш проект сам по пустому маршруту отдавал все из приложения django_app, а также ставлю 
path("grappelli/", include("grappelli.urls")), выше чем стандартная админка
в django_app.urls path("", views.home, name="home"), и создаю в views контроллер home





Задание 2.  ++
[2 балла] 
1) Создайте модель поста и комментария к посту. Объясните структуру кода моделей. Выполните миграции и покажите в админке как Вы можете создавать и удалять обе модели. 
2) Выполните расширение модели пользователя через связь один к одному. Подключите сигнал для автоматического создания модели профиля. 




Задание 3. +++
[2 балла] 
1) Создайте шаблон, в котором задействуйте 1 встроенный фильтр и 1 тэг Django. Затем реализуйте по 1 тэгу и фильтру самостоятельно и задействуйте их. Один раз воспользуйтесь переменной и псевдонимом. 
2) Выполните наследование и включение шаблонов в другие шаблоны. Объясните структуру кода шаблонов. 
 



Задание 4. +++
[3 балла] 
1) Создайте 2 маршрута, используя регулярные выражения – для постов и комментариев соответственно.  
Маршрут постов должен вести на контроллер-функцию с POST и GET методами, максимально полно реализуйте функционал этого контроллера.  
Маршрут комментариев должен вести на контроллер-класс с POST и GET методами, максимально полно реализуйте функционал этого контроллера. 
2) Выполните вывод и отправку данных для каждого из этих контроллеров. Объясните структуру кода обоих контроллеров. 
 



Задание 5. +++++
[4 балла] 
1) Создайте новый маршрут для возврата списка «незабаненных» пользователей, без регулярного выражения, также маршрут для возврата одного пользователя. Подключите библиотеку django-rest-framework и её примените её настройки. 
Напишите одну контроллер-функцию, которая будет реагировать на оба маршрута и выполнять методы: 
    получить одиночного пользователя, 
    изменить одиночного пользователя, 
    удалить одиночного пользователя, 
    получить массив пользователей с пагинацией и создать нового пользователя. 
2) Выполните подключение библотеки JWT для Django и её настроек, включая маршруты. Покажите в админке, как Вы получаете и используете токен. 


В чём разница между select_related и prefetc_related? Покажите синонемичный код на SQL.

select_related Он выполняет JOIN на уровне SQL, чтобы загрузить связанные объекты вместе с основным объектом.

prefetch_related выполняет отдельные запросы к базе данных для каждого типа связанных объектов и затем объединяет результаты в памяти Python.


пример на моих моделях Post Comment PostRaiting

select_related
    SELECT * 
    FROM post
    JOIN comment ON post.id = comment.post_id
    JOIN post_raiting ON post.id = post_raiting.post_id
    JOIN "user" ON post.author_id = "user".id
    JOIN "user" AS user_1 ON comment.author_id = user_1.id
    JOIN "user" AS user_2 ON post_raiting.author_id = user_2.id

posts = Post.objects.select_related('author').select_related('comment__author').select_related('postraiting__author').all()

prefetch_related
    SELECT * FROM post;
    SELECT * FROM comment WHERE post_id IN (...);
    SELECT * FROM post_raiting WHERE post_id IN (...);
    SELECT * FROM "user" WHERE id IN (...);
posts = Post.objects.prefetch_related('comment_set', 'postraiting_set', 'author').all()


??? использовнаие обоих с примером







Комплексное задание: ++++
В качестве практической части экзамена выполните реализацию проекта, техническое задание которого описано ниже: 
 
Тема: Веб-сайт с публикациями и комментариями к ним. 
Описание: Весь веб-сайт нужно реализовать на паттерне Django MVT, с полного нуля. Нужна постраничная пагинация публикаций и комментариев. Подключить bootstrap, иконки и дополнительные шрифты. Реализовать «футер» и «навбар».  
Страницы: домашняя, регистрация + вход, все публикации, детально о публикации + форма для отправки комментария, отправка публикации и редактирование публикации. 
Итогом проекта должен быть опубликованный и рабочий проект на Heroku. 
 
Разрешено:  
• Смотреть код и реализацию функционала в своих старых проектах, частично брать оттуда код для изменения. 
• Смотреть реализацию функционала в интернете. 
• Реализовывать дополнительный функционал, ради увеличения баллов. 
 
Запрещено:  
• Брать код преподавателя с «репозиториев» или полностью копировать чужие проекты.

