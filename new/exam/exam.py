"""
Лёгкий уровень: 
1. Как выглядит структура django MVT паттерна (можно упрощённо)? Можно словами, можно нарисовать схему.

3. Как выглядит структура проекта и приложения в Django? Если конкретнее, то что за файлы внутри каждого из них и для чего?

5. Что такое модели в Django? Покажите пример модели и расскажите об их структуре.


7. Что такое контроллеры или вью в Django? Покажите пример функции-контроллера и класса-контроллера и расскажите об их структуре.
# class Todos(View, logger, login_required):
#     pass


9. Что такое статические файлы и какие настройки определяют место их сбора и хранения?
11. В чём разница между CharField и Textfield.
13. Что такое csrf? Как его подключить к форме?

15. Можно ли использовать команду runserver для запуска «боевого проекта» и почему нет?

17.Что такое кеширование? Какие способы кеширования есть в Django?
19. Django это CMS? Если нет, в чём отличия.
21. Что такое шаблоны Jinja?


23. Как фильтровать элементы в модели?

Как использовать django ORM для создания данных партиями / пачкой?
27. Что такое django ORM? Как получить все записи с модели? Как их отфильтровать или искать внутри? Перечислите все методы ORM.
31. Объясните авторизацию пользователя в Django?

33. В чём разница между select_related и prefetc_related? Покажите синонемичный код на SQL.
??? использовнаие обоих с примером

35. Расскажите о безопасности Django.
37. Какой цикл ответа и запроса в Django?







Задание 1.  
[1 балл] 
1) Создайте новое виртуальное окружение, новый проект и приложение, выполните первичные настройки проекта. Объясните параметры настройки проекта. 
2) Выполните миграции, создайте суперпользователя. Накатите библиотеки django-grappelli, Pillow, cors-headers и их настройки. Запустите приложение. 
 
Задание 2.  
[2 балла] 
1) Создайте модель поста и комментария к посту. Объясните структуру кода моделей. Выполните миграции и покажите в админке как Вы можете создавать и удалять обе модели. 
2) Выполните расширение модели пользователя через связь один к одному. Подключите сигнал для автоматического создания модели профиля. 
 
Задание 3. 
[2 балла] 
1) Создайте шаблон, в котором задействуйте 1 встроенный фильтр и 1 тэг Django. Затем реализуйте по 1 тэгу и фильтру самостоятельно и задействуйте их. Один раз воспользуйтесь переменной и псевдонимом. 
2) Выполните наследование и включение шаблонов в другие шаблоны. Объясните структуру кода шаблонов. 
 
Задание 4. 
[3 балла] 
1) Создайте 2 маршрута, используя регулярные выражения – для постов и комментариев соответственно.  
Маршрут постов должен вести на контроллер-функцию с POST и GET методами, максимально полно реализуйте функционал этого контроллера.  
Маршрут комментариев должен вести на контроллер-класс с POST и GET методами, максимально полно реализуйте функционал этого контроллера. 
2) Выполните вывод и отправку данных для каждого из этих контроллеров. Объясните структуру кода обоих контроллеров. 
 
Задание 5. 
[4 балла] 
1) Создайте новый маршрут для возврата списка «незабаненных» пользователей, без регулярного выражения, также маршрут для возврата одного пользователя. Подключите библиотеку django-rest-framework и её примените её настройки. Напишите одну контроллер-функцию, которая будет реагировать на оба маршрута и выполнять методы: получить одиночного пользователя, изменить одиночного пользователя, удалить одиночного пользователя, получить массив пользователей с пагинацией и создать нового пользователя. 
2) Выполните подключение библотеки JWT для Django и её настроек, включая маршруты. Покажите в админке, как Вы получаете и используете токен. 
 
 
Комплексное задание: 
В качестве практической части экзамена выполните реализацию проекта, техническое задание которого описано ниже: 
 
Тема: Веб-сайт с публикациями и комментариями к ним. 
Описание: Весь веб-сайт нужно реализовать на паттерне Django MVT, с полного нуля. Нужна постраничная пагинация публикаций и комментариев. Подключить bootstrap, иконки и дополнительные шрифты. Реализовать «футер» и «навбар».  
Страницы: домашняя, регистрация + вход, все публикации, детально о публикации + форма для отправки комментария, отправка публикации и редактирование публикации. 
Итогом проекта должен быть опубликованный и рабочий проект на Heroku. 
 
Разрешено:  
• Смотреть код и реализацию функционала в своих старых проектах, частично брать оттуда код для изменения. 
• Смотреть реализацию функционала в интернете. 
• Реализовывать дополнительный функционал, ради увеличения баллов. 
 
Запрещено:  
• Брать код преподавателя с «репозиториев» или полностью копировать чужие проекты.
"""
