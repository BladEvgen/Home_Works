1.Как работает механизм GIL (Global Interpreter Lock) в Python, и какие могут быть альтернативы для многозадачных приложений на Python?
2. Объясните разницу между "глубоким копированием" (deep copy) и "поверхностным копированием" (shallow copy) объектов в Python.
3.Что такое "магические методы" (magic methods) в Python? Приведите примеры нескольких таких методов и их назначения.
4. Как работает механизм Gevent, и как он используется для асинхронного программирования в Python?
5. Что такое "выражение-генератор" (generator expression) в Python? Как оно отличается от списковых включений (list comprehension)?
6. Что такое "мемоизация" (memoization) в Python, и как она может улучшить производительность?
7. Какие инструменты и методы предоставляет Python для обработки больших файлов (больше, чем доступная память)?
8. Как работает механизм "контекстных менеджеров" (context managers) в Python, и для чего он используется?
9.Что такое "синглтон" (singleton) в Python, и как его реализовать?
10.Как можно реализовать "ленивое вычисление" (lazy evaluation) в Python?
11.Что такое "метапрограммирование" (metaprogramming) в Python, и какие средства для него предоставляет язык?
12.Как работает система импорта модулей в Python? Какие пути поиска используются?
13.Что такое "декораторы классов" (class decorators) и в каких случаях они полезны?
14.Как работает механизм "множественного наследования" (multiple inheritance) в Python, и какие могут возникнуть проблемы?
15.Как реализовать "протокол" (protocol) в Python, и зачем это нужно?
16.Что такое "генераторы сопрограмм" (coroutine generators) в Python, и как они используются для асинхронного кода?
17.Какие средства и библиотеки используются для юнит-тестирования в Python?
18.Как работает механизм "метаанализа" (static analysis) кода в Python, и какие инструменты могут его выполнять?
19.Что такое "перегрузка операторов" (operator overloading) в Python, и как ее реализовать?
20.Какие методы оптимизации кода существуют в Python для улучшения производительности?
